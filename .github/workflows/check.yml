name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '6 4 3 * *'  # Monthly check

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.10', '3.11', '3.12', '3.13']

    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true
        
    - name: Add Poetry to PATH (Windows)
      if: runner.os == 'Windows'
      run: echo "$env:USERPROFILE\.local\bin" >> $env:GITHUB_PATH
      shell: powershell
      
    - name: Install Poetry via pip (Windows fallback)
      if: failure() && runner.os == 'Windows'
      run: |
        python -m pip install --user poetry
        echo "$env:USERPROFILE\AppData\Roaming\Python\Scripts" >> $env:GITHUB_PATH
      shell: powershell
      
    - name: Verify Poetry installation
      run: poetry --version
      
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}
        
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --with dev
      
    - name: Install ViennaRNA (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y vienna-rna
        
    - name: Install ViennaRNA (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install viennarna
        
    - name: Install ViennaRNA (Windows)
      if: runner.os == 'Windows'
      run: |
        echo "ViennaRNA not easily available on Windows, integration tests will be skipped"
      
    - name: Run linting tests
      run: poetry run pytest tests/test_linting.py -v
      
    - name: Run unit tests
      run: poetry run pytest tests/test_test.py -v -m "not integration" --cov=cmdrnafold --cov-report=xml --cov-report=term-missing
      
    - name: Run integration tests
      run: poetry run pytest tests/test_test.py -v -m "integration" || echo "Integration tests failed (ViennaRNA may not be available)"
      
    - name: Run Bandit security scan
      run: poetry run bandit -r src/ -f json -o bandit-report.json || true
      
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports-${{ matrix.os }}-${{ matrix.python-version }}
        path: bandit-report.json

  lint:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true
        
    - name: Install dependencies
      run: poetry install --no-interaction --with dev
      
    - name: Run Black
      run: poetry run black --check --diff src/ tests/
      
    - name: Run isort
      run: poetry run isort --check-only --diff src/ tests/
      
    - name: Run flake8
      run: poetry run flake8 src/ tests/
      
    - name: Run mypy
      run: poetry run mypy src/
